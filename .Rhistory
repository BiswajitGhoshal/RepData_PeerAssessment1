data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
str
str()
str(str)
str(a)
str(my_data)
str(my_vector)
str(i)
str(my_matrix)
str(m)
set.seed(20)
seed
seed()
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- .5 + 2 * x +e
summary(y)
plot(x,y)
y
set.seed(20)
set.seed(5)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- .5 + 2 * x +e
plot(x,y)
summary(y)
?rbinom()
set.seed(10)
x <- rbinom(100,1,.5)
e <- rnorm(100,0,2)
y <- .5 + 2 * x +e
summary(y)
plot(x,y)
set.seed(1)
x <- rnorm(100)
log.mu <-.5 + .3 * x
y <- rpois(100,exp(log.mu))
summary(y)
plot(x,y)
sample(1:10, 4)
sample(1:10, 4)
sample(1:10, 4)
sample(1:10, 4)
set.seed(1)
sample(1:10, 4)
sample(1:10, 4)
sample(1:10, 4)
letters
summary(letters)
class(letters)
mode(letters)
mode(letters, 4)
sample(letters, 4)
sample(letters, 6)
sample(1:10)
sample(1:10)
sample(1:10 replace = TRUE)
sample(1:10, replace = TRUE)
sample(1:10, replace = TRUE)
?hilbert()
hilbert(100)
x <- rnorm(1000)
system.time(svd(x))
svd(x)
system.time( {})
system.time( {
n <- 1000
r<- numeric(n)
for (i in 1:n) {
x<- rnorm(n)
r[i]<- mean(x)
}
})
sample.interval
sample.interval()
sampling.time()
sampling.time
data
data()
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
set.seed(1)
normals <- rnorm(100,1,2)
nll <- make.NegLogLik(normals)
nll
ls(environment(nll))
optim(c(mu - 0, sigma = 1), nll)$par
= 0
optim(c(mu = 0, sigma = 1), nll)$par
nll <- make.NegLogLik(normals, c(FALSE,2))
optimize(nll, c(-1,3))$minimum
nll <- make.NegLogLik(normals, c(1, FALSE))
optimize(nll, c(le-6,10))$minimum
optimize(nll, c(1e-6,10))$minimum
normals
nll <- make.NegLogLik(normals, c(1, FALSE))
x<- seq(1:7, 1:9, len = 100)
x<- seq(1.7, 1.9, len = 100)
x
y <- sapply(x,nll)
plot(x,exp(-(y-min(y)), type) = "1")
plot(x,exp(-(y-min(y)), type = "1")
)
plot(x,exp(-(y-min(y))), type = "1")
plot(x,exp(-(y-min(y))))
plot(x,exp(-(y-min(y))),1)
plot(x,exp(-(y-min(y))),"1")
plot(x,exp(-(y-min(y))))
nll <- make.NegLogLik(normals, c(FALSE, 2))
x<- seq(0.5, 1.5, len = 100)
y <- sapply(x,nll)
plot(x,exp(-(y-min(y))))
plot(x,exp(-(y-min(y))), type = "l")
plot(x,exp(-(y-min(y))), type = 'l')
plot(x,exp(-(y-min(y))), type = "l")
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("Imbalance = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
library(datasets)
data(cars)
with(cars, plot(speed,dist))
library(lattice)
state <- data.frame(state.x77, region=state.region)
xyplot(Life.Exp ~ Income | region, data= state, layout =c(4,1))
?par
hist(airquality$ozone)
hist(airquality$Ozone)
size(airquality)
length(airquality)
with(airquality, plot(Wind,Ozone))
airquality <- transform(airqulity, Month=Factor(Month))
airquality <- transform(airquality, Month=Factor(Month))
airquality <- transform(airquality, Month=factor(Month))
boxplot(Ozone~Month, airquality, xlab="Month", ylab = "Ozone(ppb)")
boxplot(Month~Ozone, airquality, xlab="Month", ylab = "Ozone(ppb)")
with(airquality, plot(Wind,Ozone))
title(main="Ozone and Wind in NYC")
with(airquality, plot(Wind,Ozone), main="Ozone and Wind in NYC")
with(airquality, plot(Wind,Ozone, main="Ozone and Wind in NYC"))
with(airquality, plot(Wind,Ozone, main="Ozone and Wind in NY City"))
wit(subset(airquality, Month=5), points(Wind,Ozone, col="Red"))
with(subset(airquality, Month=5), points(Wind,Ozone, col="Red"))
with(airquality, plot(Wind,Ozone, main="Ozone and Wind in NY City"))
with(subset(airquality, Month=5), points(Wind,Ozone, col="Red"))
with(airquality, plot(Wind,Ozone, main="Ozone and Wind in NY City"))
with(subset(airquality, Month=5), points(Wind,Ozone, col="blue"))
with(subset(airquality, Month!=5), points(Wind,Ozone, col="red"))
with(subset(airquality, Month!=5), points(Wind,Ozone, col="black"))
with(subset(airquality, Month=5), points(Wind,Ozone, col="blue"))
with(subset(airquality, Month!=5), points(Wind,Ozone, col="black"))
legend("toleft",pch=1,col=c("blue","red"),legend=c("May", "Other Months"))
legend("topleft",pch=1,col=c("blue","red"),legend=c("May", "Other Months"))
legend("topright",pch=1,col=c("blue","red"),legend=c("May", "Other Months"))
legend("topleft")
legend("topleft",legend=c())
legend("topleft",legend=NULL
.
model <- lm(Ozone~wind,airquality)
model <- lm(Ozone~Wind,airquality)
abline(model,lwd=2)
abline(model,lwd=1)
abline(model,lwd=5)
abline(model,lwd=2)
abline(model,lwd=0)
abline()
?abline()
?lm()
par(mfrow=c(12))
par(mfrow=c(1,2))
with(airquality, {})
with(airquality, {
plot(Wind,Ozone,main="Oz and Wnd")
plot(Solar.R,Ozone,main="Oz and Slr Rdn") })
par(mfrow=c(1,2))
with(airquality, {
plot(Wind,Ozone,main="Oz and Wnd")
plot(Solar.R,Ozone,main="Oz and Slr Rdn") })
par(mfrow=c(2,1))
with(airquality, {
plot(Wind,Ozone,main="Oz and Wnd")
plot(Solar.R,Ozone,main="Oz and Slr Rdn") })
par(mfrow=c(1,2))
with(airquality, {
plot(Wind,Ozone,main="Oz and Wnd")
plot(Solar.R,Ozone,main="Oz and Slr Rdn") })
example(points)
dev.cur()
library(knitr)
install.package(knitr)
package.install(knitr)
install.packages(knitr)
install.packages("knitr")
install.packages("knitr")
install.packages("xtable")
getwd()
setwd()
setwd("D:/Biswajit/DataScSpclst/ReprodResrch/Ex-1/RepData_PeerAssessment1")
head(f)
f <- read.csv("activity.csv")
g <- aggregate(f$steps, list(f$date), sum, na.rm=TRUE)
colnames(g) <- c("day", "steps")
a <- aggregate(f$steps, list(f$interval), mean, na.rm=TRUE)
colnames(a) <- c("interval", "steps")
x <- nrow(f)
y <- nrow(f[!is.na(f$steps),])
e <- f
t <- which(is.na(f$steps))
length(t)
t[1]
e[t[1],"interval"]
a$interval == e[t[1],"interval"]
a[a$interval == e[t[1],"interval","steps"]
]
a[(a$interval == e[t[1],"interval"),"steps"]
a[(a$interval == e[t[1],"interval"]),"steps"]
e[t[1],"steps"] <- a[(a$interval == e[t[1],"interval"]),"steps"]
e[t[1],"steps"]
e[t[2],"steps"] <- a[(a$interval == e[t[2],"interval"]),"steps"]
e[t[2304],"steps"] <- a[(a$interval == e[t[2304],"interval"]),"steps"]
e[t[2304],"steps"]
e[t[2],"steps"]
e[t[3],"steps"]
for (i in 1:length(t)) {
e[t[i],"steps"] <- a[(a$interval == e[t[i],"interval"]),"steps"]
}
anyNA(e)
b <- aggregate(e$steps, list(e$date), sum, na.rm=TRUE)
colnames(b) <- c("day_b", "steps_b")
head(b)
head(g)
anyNA(g)
g <- aggregate(f$steps, list(f$date), sum, na.rm=FALSE)
anyNA(g)
mean(g$steps,na.rm=TRUE)
length(g)
nrow(g)
g
colnames(g) <- c("day", "steps")
mean(g$steps,na.rm=TRUE)
medean(g$steps,na.rm=TRUE)
median(g$steps,na.rm=TRUE)
mean(g$steps,na.rm=FALSE)
head(g)
weekday(g$day)
weekdays(g$day)
weekdays(toDate(g$day))
Date()
sys.Date()
Sys.Date()
weekdays(toDate(g$day[1]))
asDate(g$day[1])
as.Date(g$day[1])
weekdays(as.Date(g$day[1]))
weekdays(as.Date(g$day))
head(g)
head(b)
weekdays(as.Date(b$day_b)), b$day_b
weekdays(as.Date(b$day_b)), b$steps_b
g$day, g$steps
g$day g$steps
weekdays(as.Date(b$day_b))
t <- weekdays(as.Date(b$day_b))
a <- data.frame(t, b)
str(a)
a[1,]
a[t == "Monday",]
a[t == ("Saturday" | "Sunday)",]
a[t == ("Saturday" | "Sunday"),]
a[(t == "Saturday") | (t == "Sunday"),]
weekdays
weekdays()
letters
days
day
factor(letters[1:20], labels="letter")
letter1
t
tt <- factor(c("weekday", "weekend"), weekdays(as.Date(b$day_b)))
tt
tt <- factor(c("weekday", "weekend"), value = (Type <- c(rep("A",4), rep("B",4), rep("C",4))"weekend"weekdays(as.Date(b$day_b)))
Type <- c(rep("A",4), rep("B",4), rep("C",4))
Type
Type <- factor(Type)
Type
daytype <- factor(c(rep("weekday",5),rep("weekend",2))
)
daytype
b[1,]
weekdays(b[1,"day_b"])
t <- weekdays(as.Date(b[1,day_b]))
t <- weekdays(as.Date(b[1,"day_b"]))
t
tapply(b$steps_b, daytype, mean)
length(b)
nrow(b)
tapply(b$steps_b[7,], daytype, mean)
tapply(b$steps_b[7], daytype, mean)
b$steps_b[7]
b$steps_b[1:7]
tapply(b$steps_b[1:7], daytype, mean)
tapply(b$steps_b[1:7], daytype)
tapply(b$steps_b[1:7], *)
t <- ifelse((as.Date(b[1,"day_b"]) == c("Monday", "Tuesday")),"Weekday","weekend")
t <- ifelse((as.Date(b[1,"day_b"]) == "Monday"),"Weekday","weekend")
str(t)
str(e)
day <- factor(c("weekday","weekend"))
e <- data.frame(day, e)
str(e)
e[1,]
e[1:7,]
nrow(e)
for (i in 1:nrow(e)) {
if ((as.Date(e[i,"date"]) == "Saturday") | (as.Date(e[i,"date"]) == "Sunday")) {e[i,"day"] <- "weekend" }
else {e[i,"day"] <- "weekday" } }
(as.Date(e[1,"date"]) == "Saturday")
as.Date(e[1,"date"]
)
weekdays(b[1,"day_b"])
b[1,"day_b"]
weekdays(as.Date(e[1,"date"])
)
for (i in 1:nrow(e)) {
if ((weekdays(as.Date(e[i,"date"])) == "Saturday") | (weekdays(as.Date(e[i,"date"])) == "Sunday")) {e[i,"day"] <- "weekend" }
else {e[i,"day"] <- "weekday" } }
head(e)
e[1:16,]
e[280:300,]
e[1430:1450,]
anyNA(e)
p <- aggregate(e$steps, list(e$day, e$interval),mean)
p[270:290,]
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)
)
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
iris[1:4]
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, type = "l", bg = c("red", "green3", "blue")[unclass(iris$Species)])
par(mfrow = c(2, 3))
par(cex = 0.6)
par(mar = c(0, 0, 0, 0), oma = c(4, 4, 0.5, 0.5))
par(tcl = -0.25)
par(mgp = c(2, 0.6, 0))
for (i in 1:6) {
plot(1, axes = FALSE, type = "n")
mtext(letters[i], side = 3, line = -1, adj = 0.1, cex = 0.6,
col = "grey40")
if (i %in% c(4, 5, 6))
axis(1, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
if (i %in% c(1, 4))
axis(2, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
box(col = "grey60")
}
> mtext("x axis", side = 1, outer = TRUE, cex = 0.7, line = 2.2,
+ col = "grey20")
> mtext("y axis", side = 2, outer = TRUE, cex = 0.7, line = 2.2,
+ col = "grey20")
par(mfrow = c(2, 3))
par(cex = 0.6)
par(mar = c(0, 0, 0, 0), oma = c(4, 4, 0.5, 0.5))
par(tcl = -0.25)
par(mgp = c(2, 0.6, 0))
for (i in 1:6) {
plot(1, axes = FALSE, type = "n")
mtext(letters[i], side = 3, line = -1, adj = 0.1, cex = 0.6,
col = "grey40")
if (i %in% c(4, 5, 6))
axis(1, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
if (i %in% c(1, 4))
axis(2, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
box(col = "grey60")
}
mtext("x axis", side = 1, outer = TRUE, cex = 0.7, line = 2.2,
+ col = "grey20")
mtext("y axis", side = 2, outer = TRUE, cex = 0.7, line = 2.2,
+ col = "grey20")
par(mfrow = c(2, 1))
par(cex = 0.6)
par(mar = c(0, 0, 0, 0), oma = c(4, 4, 0.5, 0.5))
par(tcl = -0.25)
par(mgp = c(2, 0.6, 0))
for (i in 1:6) {
plot(1, axes = FALSE, type = "n")
mtext(letters[i], side = 3, line = -1, adj = 0.1, cex = 0.6,
col = "grey40")
if (i %in% c(4, 5, 6))
axis(1, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
if (i %in% c(1, 4))
axis(2, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
box(col = "grey60")
}
plot(1, axes = FALSE, type = "n")
plot(1, axes = FALSE, type = "n")
mtext(letters[i], side = 3, line = -1, adj = 0.1, cex = 0.6,
col = "grey40")
if (i %in% c(4, 5, 6))
axis(1, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
if (i %in% c(1, 4))
axis(2, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
box(col = "grey60")
i
i <- 1
plot(1, axes = FALSE, type = "n")
mtext(letters[i], side = 3, line = -1, adj = 0.1, cex = 0.6,
col = "grey40")
if (i %in% c(4, 5, 6))
axis(1, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
if (i %in% c(1, 4))
axis(2, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
box(col = "grey60")
i <- 4
plot(1, axes = FALSE, type = "n")
mtext(letters[i], side = 3, line = -1, adj = 0.1, cex = 0.6,
col = "grey40")
if (i %in% c(4, 5, 6))
axis(1, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
if (i %in% c(1, 4))
axis(2, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
box(col = "grey60")
i <- 1
plot(1, axes = FALSE, type = "n")
mtext(letters[i], side = 3, line = -1, adj = 0.1, cex = 0.6,
col = "grey40")
if (i %in% c(4, 5, 6))
axis(1, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
if (i %in% c(1, 4))
axis(-2, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
box(col = "grey60")
tcl
par(tcl = 0.25)
plot(1, axes = FALSE, type = "n")
mtext(letters[i], side = 3, line = -1, adj = 0.1, cex = 0.6,
col = "grey40")
if (i %in% c(4, 5, 6))
axis(1, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
if (i %in% c(1, 4))
axis(2, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
box(col = "grey60")
i <- 4
plot(1, axes = FALSE, type = "n")
mtext(letters[i], side = 3, line = -1, adj = 0.1, cex = 0.6,
col = "grey40")
if (i %in% c(4, 5, 6))
axis(1, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
if (i %in% c(1, 4))
axis(2, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
box(col = "grey60")
par(tcl = -0.25)
plot(1, axes = FALSE, type = "n")
mtext(letters[i], side = 3, line = -1, adj = 0.1, cex = 0.6,
col = "grey40")
if (i %in% c(4, 5, 6))
axis(1, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
if (i %in% c(1, 4))
axis(2, col = "grey40", col.axis = "grey20", at = seq(0.6,
1.2, 0.2))
box(col = "grey60")
library(lattice)
head(e)
xyplot(steps ~ interval | day, data = e, layout = (1,2))
xyplot(steps ~ interval | day, data = e, layout = c(1,2))
xyplot(steps ~ interval | day, data = e, type = "l",layout = c(1,2))
p[270:290,]
p[1,]
xyplot(x ~ Group.2 | Group.1, data = p, type = "l",layout = c(1,2))
e[1,]
